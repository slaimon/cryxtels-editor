import * as Primitives from "./primitives.js"
import {tsin, tcos} from "./util.js"
export {Text}

const validChars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`";
const charWidth = 4;
const symbol = [
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3,  0, -2,  0,  1, -1,  1,  1,  2,  1,  1, -1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -1, -2, -1, -1,  1, -2,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -1, -2, -1,  2,  1, -2,  1,  2, -2,  1,  2,  1, -2, -1,  2, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 8,  1, -2, -1, -2, -1, -2, -2, -1, -2, -1, -2,  0, -2,  0,  1,  0,  1,  0,  1,  1,  1,  1,  0,  2,  0,  2, -2,  2,  0, -3,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 7, -2, -1, -1, -1, -1, -1, -1, -2, -1, -2, -2, -1, -1,  2,  1, -2,  1,  2,  2,  1,  2,  1,  2,  2,  2,  2,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 6,  2,  0,  0,  2,  0,  2, -1,  1, -1,  1,  1, -1,  1, -1,  0, -2,  0, -2, -1, -1, -1, -1,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 1,  0, -2, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4,  1, -3,  0, -2,  0, -2, -1,  0, -1,  0,  0,  2,  0,  2,  1,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -1, -3,  0, -2,  0, -2,  1,  0,  1,  0,  0,  2,  0,  2, -1,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -3,  0,  3,  0,  0, -3,  0,  3, -2, -2,  2,  2,  2, -2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -1,  0,  1,  0,  0, -1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 1, -1,  1, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 1, -1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -1,  2,  0,  2,  0,  2,  0,  1,  0,  1, -1,  1, -1,  1, -1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 1,  1, -2, -1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 9, -1, -2,  1, -2,  1, -2,  2, -1,  2, -1,  2,  1,  2,  1,  1,  2,  1,  2, -1,  2, -1,  2, -2,  1, -2,  1, -2, -1, -2, -1, -1, -2,  0, -1,  0,  1,  0,  0,  0,  0 ],
    [ 2, -1, -1,  0, -2,  0, -2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 5, -2, -1, -1, -2, -1, -2,  0, -2,  0, -2,  1, -1,  1, -1, -2,  2, -2,  2,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 6, -2, -2,  0, -2,  0, -2,  1, -1,  1, -1, -1,  0, -1,  0,  1,  1,  1,  1,  0,  2,  0,  2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3,  0,  2,  0, -2,  0, -2, -2,  1, -2,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 5,  1, -2, -2, -2, -2, -2, -2,  0, -2,  0,  1,  0,  1,  0,  1,  2,  1,  2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 8,  1, -2, -1, -2, -1, -2, -2, -1, -2, -1, -2,  1, -2,  1, -1,  2, -1,  2,  0,  2,  0,  2,  1,  1,  1,  1,  0,  0,  0,  0, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -2, -2,  1, -2,  1, -2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 10,-1, -2,  1, -2,  1, -2,  2, -1,  2, -1,  1,  0,  1,  0,  2,  1,  2,  1,  1,  2,  1,  2, -1,  2, -1,  2, -2,  1, -2,  1, -1,  0, -1,  0, -2, -1, -2, -1, -1, -2 ],
    [ 8, -2, -1, -1, -2, -1, -2,  0, -2,  0, -2,  1, -1,  1, -1,  1,  1,  1,  1,  0,  2,  0,  2, -2,  2, -2, -1, -1,  0, -1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 6,  0,  0,  0, -1,  0, -1, -1,  0, -1,  0,  0,  0,  0,  2, -1,  2, -1,  2,  0,  1,  0,  1,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 6,  0,  0,  1,  0,  1,  0, -1,  2, -1,  2,  0,  0,  0, -2,  1, -2,  1, -2,  0, -1,  0, -1,  0, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -1,  0,  1, -1, -1,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -1, -1,  1, -1, -1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -1, -1,  1,  0, -1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 7, -2, -2, -1, -3, -1, -3,  0, -3,  0, -3,  1, -2,  1, -2,  1, -1,  1, -1,  0, -1,  0, -1,  0,  0,  0,  1,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 10, 0,  1,  1,  0,  1,  0,  0, -1,  0, -1, -1,  0, -1,  0,  0,  1,  0,  1,  2,  0,  2,  0,  1, -2,  1, -2, -1, -2, -1, -2, -2,  0, -2,  0, -1,  2, -1,  2,  1,  2 ],
    [ 3, -2,  2,  0, -2,  0, -2,  2,  2, -1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 8, -2, -2,  0, -2,  0, -2,  1, -1,  1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  0,  2,  0,  2, -2,  2, -2,  2, -2, -2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 5,  1, -2, -1, -2, -1, -2, -2, -1, -2, -1, -2,  1, -2,  1, -1,  2, -1,  2,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 6, -2, -2,  0, -2,  0, -2,  1, -1,  1, -1,  1,  1,  1,  1,  0,  2,  0,  2, -2,  2, -2,  2, -2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4,  1, -2, -2, -2, -2, -2, -2,  2, -2,  2,  1,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3, -2, -2,  1, -2, -2, -2, -2,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 7,  1, -2, -1, -2, -1, -2, -2, -1, -2, -1, -2,  1, -2,  1, -1,  2, -1,  2,  1,  2,  1,  2,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3, -2, -2, -2,  2,  1, -2,  1,  2, -2,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3, -1, -2,  1, -2,  0, -2,  0,  2, -1,  2,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 5, -2,  1, -1,  2, -1,  2,  0,  2,  0,  2,  1,  1,  1,  1,  1, -2,  0, -2,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3, -2, -2, -2,  2, -2,  0,  1, -2, -2,  0,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3, -2, -2, -1, -2, -1, -2, -1,  2, -2,  2,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -2,  2, -2, -2, -2, -2,  0,  0,  0,  0,  2, -2,  2, -2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3, -2,  2, -2, -2, -2, -2,  2,  2,  2,  2,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 8, -1, -2,  1, -2,  1, -2,  2, -1,  2, -1,  2,  1,  2,  1,  1,  2,  1,  2, -1,  2, -1,  2, -2,  1, -2,  1, -2, -1, -2, -1, -1, -2,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 5, -2, -2,  0, -2,  0, -2,  1, -1,  1, -1,  1,  0,  1,  0, -2,  0, -2,  2, -2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 10,-1, -2,  1, -2,  1, -2,  2, -1,  2, -1,  2,  1,  2,  1,  1,  2,  1,  2, -1,  2, -1,  2, -2,  1, -2,  1, -2, -1, -2, -1, -1, -2,  1,  1,  2,  2,  2,  2,  3,  2 ],
    [ 6, -2, -2,  0, -2,  0, -2,  1, -1,  1, -1,  1,  0,  1,  0, -2,  0, -2,  2, -2, -2, -1,  0,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 7,  1, -2, -1, -2, -1, -2, -2, -1, -2, -1, -2,  0, -2,  0,  1,  0,  1,  0,  1,  1,  1,  1,  0,  2,  0,  2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -2, -2,  2, -2,  0, -2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -2, -2, -2,  1, -2,  1, -1,  2, -1,  2,  1,  2,  1,  2,  1, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -2, -2,  0,  2,  0,  2,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -2, -2, -1,  2, -1,  2,  1, -1, -1, -1,  1,  2,  1,  2,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -2, -2,  2,  2,  2, -2, -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -2, -2,  0,  0,  1, -2, -1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3, -2, -2,  2, -2,  2, -2, -2,  2, -2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3,  0, -2, -1, -2, -1, -2, -1,  2, -1,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 1, -1, -2,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 3,  0, -2,  1, -2,  1, -2,  1,  2,  1,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 2, -1, -1,  0, -2,  0, -2,  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 1, -2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
    [ 4, -1, -2,  1, -1,  1, -1,  0, -1,  0, -1, -1, -1, -1, -1, -1, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ]
];

//  note i replace the underscore with a space. i don't know how, but the game always replaces underscores with spaces.
//  meanwhile if i use them here they get replaced with carets '^', and i don't know the reason for this either.
function prepareValidString(str) {
    // we replace all unsupported chars with whitespace, as in the original
    str = str.toUpperCase().replaceAll("_", " ");
    for (let char of str) {
        if (validChars.indexOf(char) === -1) {
            console.log(`Warning: unsupported character '${char}', skipping`);
            str = str.replaceAll(char, " ");
        }
    }
    return str;
}

class Text extends Primitives.Primitive {
    constructor (str, c, scale_x, scale_y, alpha, beta)  {
        super(`text:"${str}"`);

        let fx=0, fy=0, px=0, py=0;
        let sx=0, sy=0, sz=0;
        let lx=0, ly=0, lz=0;
        let f,  z2;

        let step_x = charWidth * scale_x * tcos(beta);
        let step_z = charWidth * scale_x * tsin(beta);

        scale_x *= 0.8;
        scale_y *= 0.8;

        str = prepareValidString(str);
        for (let char of str) {
            let t = validChars.indexOf(char);
            if (t === -1) {
                throw new Error(`TEXT ERROR: Invalid character encountered`);
            }
            px = 1000;
            f  = 1;
            
            for (let i=0; i<symbol[t][0]; i++) {
                fx = symbol[t][f+0] * scale_x;
                fy = symbol[t][f+1] * scale_y;
                if (fx===px && fy===py) {
                    sx = lx;
                    sy = ly;
                    sz = lz;
                }
                else {
                    z2 = fy * tsin(alpha);
                    sx = fx * tcos(beta)  + z2 * tsin(beta) + c[0];
                    sy = fy * tcos(alpha)                   + c[1];
                    sz = z2 * tcos(beta)  - fx * tsin(beta) + c[2];
                }
                px = symbol[t][f+2] * scale_x;
                py = symbol[t][f+3] * scale_y;
                z2 = py * tsin(alpha);
                lz = z2 * tcos(beta) - px * tsin(beta) + c[2];
                ly = py * tcos(alpha)                  + c[1];
                lx = px * tcos(beta) + z2 * tsin(beta) + c[0];

                this.Add(new Primitives.Line([sx, sy, sz], [lx, ly, lz]));
                f += 4;
            }

            c[0] += step_x;
            c[2] += step_z;
        }
    }
}